@using WebApp.Models
@using Microsoft.AspNetCore.Mvc.RazorPages
@model WebApp.Models.QuestionnaireDto

@{
    ViewData["Title"] = "Create Questionnaire";
}

<link rel="stylesheet" href="~/css/QCreate.css" />

<div class="container">
    <form id="questionnaire-form">
        <div class="form-group">
            <label for="title">Questionnaire Title</label>
            <input type="text" id="title" name="title" class="form-control" required />
        </div>

        <div class="form-group">
            <label for="course">Select Course</label>
            <select id="course" name="course" class="form-control" required>
                @foreach (var course in ViewBag.Courses)
                {
                    <option value="@course.Id">@course.Name</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="class">Select Class</label>
            <select id="class" name="class" class="form-control" required>
                @foreach (var course in ViewBag.Courses)
                {
                    @foreach (var cls in course.Classes)
                    {
                        <option value="@cls.Id">@course.Name - @cls.Name</option>
                    }
                }
            </select>
        </div>

        <div class="flex-container">
            <div class="left-panel">
                <div class="section welcome-section" data-type="welcome">
                    <h3>Welcome Page</h3>
                </div>
                <div id="drop-area" class="drop-area">
                    <p>Drag question types here</p>
                </div>
                <div class="section end-section" data-type="end">
                    <h3>End Page</h3>
                </div>
                <button id="submit-button" class="submit-button" type="button">Submit</button>
            </div>

            <div class="right-panel">
                <div class="question-type" draggable="true" data-type="Text">Text</div>
                <div class="question-type" draggable="true" data-type="MultipleChoice">Multiple Choice</div>
                <div class="question-type" draggable="true" data-type="Range">Range</div>
                <div class="question-type" draggable="true" data-type="Degree">Degree</div>
            </div>
        </div>
    </form>
</div>

<!-- Modals for question settings -->
<div id="multiple-choice-modal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Multiple Choice Question Settings</h2>
        <label for="mc-question-text">Question:</label>
        <textarea id="mc-question-text" rows="4"></textarea>
        <h3>Options</h3>
        <div id="options-container">
            <input type="text" class="option-input" placeholder="Option 1">
            <input type="text" class="option-input" placeholder="Option 2">
            <input type="text" class="option-input" placeholder="Option 3">
            <input type="text" class="option-input" placeholder="Option 4">
        </div>
        <button id="add-option">Add Option</button>
    </div>
</div>

<div id="short-text-modal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Short Text Question Settings</h2>
        <label for="short-question-text">Question:</label>
        <textarea id="short-question-text" rows="4"></textarea>
    </div>
</div>

<div id="welcome-modal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Welcome Page Settings</h2>
        <label for="welcome-text">Text:</label>
        <textarea id="welcome-text" rows="4"></textarea>
    </div>
</div>

<div id="end-modal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>End Page Settings</h2>
        <label for="end-text">Text:</label>
        <textarea id="end-text" rows="4"></textarea>
    </div>
</div>

<div id="scale-modal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Scale Question Settings</h2>
        <label for="scale-question-text">Question:</label>
        <textarea id="scale-question-text" rows="4"></textarea>
    </div>
</div>

<div id="rating-modal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <h2>Rating Question Settings</h2>
        <label for="rating-question-text">Question:</label>
        <textarea id="rating-question-text" rows="4"></textarea>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const questionTypes = document.querySelectorAll('.question-type');
        const dropArea = document.getElementById('drop-area');
        const modals = {
            'MultipleChoice': document.getElementById('multiple-choice-modal'),
            'Text': document.getElementById('short-text-modal'),
            'Range': document.getElementById('scale-modal'),
            'Degree': document.getElementById('rating-modal')
        };
        const closeModalButtons = document.querySelectorAll('.close');
        let questionCount = 1;
        const questionData = {};

        const typeMap = {
            'MultipleChoice': 'Multiple Choice',
            'Text': 'Text',
            'Range': 'Range',
            'Degree': 'Degree'
        };

        questionTypes.forEach(type => {
            type.addEventListener('dragstart', dragStart);
        });

        dropArea.addEventListener('dragover', dragOver);
        dropArea.addEventListener('drop', drop);

        document.querySelector('.welcome-section').addEventListener('click', openModal);
        document.querySelector('.end-section').addEventListener('click', openModal);

        function dragStart(event) {
            event.dataTransfer.setData('text', event.target.dataset.type);
        }

        function dragOver(event) {
            event.preventDefault();
        }

        function drop(event) {
            event.preventDefault();
            const type = event.dataTransfer.getData('text');
            const newElement = document.createElement('div');
            newElement.classList.add('question-type');
            newElement.textContent = `Question ${questionCount}: ${typeMap[type]}`;
            newElement.dataset.type = type;
            newElement.dataset.rank = questionCount++;
            newElement.dataset.id = Date.now();
            newElement.addEventListener('click', openModal);
            dropArea.appendChild(newElement);
        }

        function openModal(event) {
            const type = event.currentTarget.dataset.type;
            const id = event.currentTarget.dataset.id;
            if (modals[type]) {
                modals[type].style.display = "block";
                modals[type].dataset.currentQuestion = id;
                if (questionData[id]) {
                    loadQuestionData(type, id);
                } else {
                    clearModalData(type);
                }
            }
        }

        function loadQuestionData(type, id) {
            if (type === 'MultipleChoice') {
                document.getElementById('mc-question-text').value = questionData[id].title || '';
                const optionsContainer = document.getElementById('options-container');
                optionsContainer.innerHTML = '';
                (questionData[id].options || []).forEach((option, index) => {
                    const newOption = document.createElement('input');
                    newOption.type = 'text';
                    newOption.classList.add('option-input');
                    newOption.placeholder = `Option ${index + 1}`;
                    newOption.value = option;
                    optionsContainer.appendChild(newOption);
                });
            } else if (type === 'Text') {
                document.getElementById('short-question-text').value = questionData[id].title || '';
            } else if (type === 'Range') {
                document.getElementById('scale-question-text').value = questionData[id].title || '';
            } else if (type === 'Degree') {
                document.getElementById('rating-question-text').value = questionData[id].title || '';
            }
        }

        function clearModalData(type) {
            if (type === 'MultipleChoice') {
                document.getElementById('mc-question-text').value = '';
                const optionsContainer = document.getElementById('options-container');
                optionsContainer.innerHTML = '';
                for (let i = 1; i <= 4; i++) {
                    const newOption = document.createElement('input');
                    newOption.type = 'text';
                    newOption.classList.add('option-input');
                    newOption.placeholder = `Option ${i}`;
                    optionsContainer.appendChild(newOption);
                }
            } else if (type === 'Text') {
                document.getElementById('short-question-text').value = '';
            } else if (type === 'Range') {
                document.getElementById('scale-question-text').value = '';
            } else if (type === 'Degree') {
                document.getElementById('rating-question-text').value = '';
            }
        }

        closeModalButtons.forEach(button => {
            button.onclick = function () {
                saveModalData(button.parentElement.parentElement.dataset.currentQuestion);
                button.parentElement.parentElement.style.display = "none";
            };
        });

        window.onclick = function (event) {
            if (event.target.classList.contains('modal')) {
                saveModalData(event.target.dataset.currentQuestion);
                event.target.style.display = "none";
            }
        };

        document.getElementById('add-option').addEventListener('click', function () {
            const optionsContainer = document.getElementById('options-container');
            const optionCount = optionsContainer.querySelectorAll('.option-input').length + 1;
            const newOption = document.createElement('input');
            newOption.type = 'text';
            newOption.classList.add('option-input');
            newOption.placeholder = `Option ${optionCount}`;
            optionsContainer.appendChild(newOption);
        });

        function saveModalData(id) {
            const type = document.querySelector(`[data-id='${id}']`).dataset.type;
            if (!questionData[id]) {
                questionData[id] = { type, title: '', options: [] };
            }

            if (type === 'MultipleChoice') {
                questionData[id].title = document.getElementById('mc-question-text').value;
                const options = [];
                document.querySelectorAll('.option-input').forEach(optionEl => {
                    options.push(optionEl.value);
                });
                questionData[id].options = options;
            } else if (type === 'Text') {
                questionData[id].title = document.getElementById('short-question-text').value;
            } else if (type === 'Range') {
                questionData[id].title = document.getElementById('scale-question-text').value;
            } else if (type === 'Degree') {
                questionData[id].title = document.getElementById('rating-question-text').value;
            }
        }

        document.getElementById('submit-button').addEventListener('click', function () {
            const title = document.getElementById('title').value;
            const classId = document.getElementById('class').value;
            const questions = [];

            for (const [id, data] of Object.entries(questionData)) {
                questions.push({
                    rank: parseInt(document.querySelector(`[data-id='${id}']`).dataset.rank, 10),
                    type: data.type,
                    title: data.title,
                    options: data.options
                });
            }

            fetch('/Questionnaire/Create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ title, class: classId, questions })
            }).then(response => response.json()).then(data => {
                if (data.questionnaireId) {
                    alert('Questionnaire were successfully recorded.');
                    window.location.href = `/Professor/Index`;
                } else {
                    alert('Error submitting the questionnaire.');
                }
            });
        });
    });
</script>